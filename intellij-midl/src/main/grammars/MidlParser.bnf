{
//  generate=[psi="no"]
//  generatePsi=false // We employ hand-written Kotlin PSI
  parserClass="net.demurgos.midl.lang.parser.MidlParser"
//  parserUtilClass="org.toml.lang.parse.TomlParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Midl"
  psiImplClassSuffix="Impl"
  psiPackage="net.demurgos.midl.lang.psi"
  psiImplPackage="net.demurgos.midl.lang.psi.impl"

  elementTypeHolderClass="net.demurgos.midl.lang.psi.MidlTypes"
  elementTypeClass="net.demurgos.midl.lang.psi.MidlElementType"
  tokenTypeClass="net.demurgos.midl.lang.psi.MidlTokenType"

  tokens = [
    LCURLY
    RCURLY
    LBRACK
    RBRACK
    LPAREN
    RPAREN
    COLON
    SEMICOLON
    EQ
    EXCL

    BLOCK_COMMENT
    LINE_COMMENT
    BLOCK_DOC

    BOOL_LITERAL
    INT_LITERAL
    STRING_LITERAL

    TYPE_KW
    IDENTIFIER
    WHITE_SPACE
  ]
}

File ::= SimpleTrivia* (ModItemList SimpleTrivia*)?

private ModItemList ::= ModItem (SimpleTrivia* ModItem)*
ModItem ::= AttributeItem | DocItem  | EnumDeclaration | StructDeclaration | SumDeclaration

DocItem ::= Doc
AttributeItem ::= Attribute
StructDeclaration ::= STRUCT_KW Trivia+ IDENTIFIER Trivia* StructBody {pin = 1}
EnumDeclaration ::= ENUM_KW Trivia+ IDENTIFIER Trivia* LCURLY Trivia* RCURLY {pin = 1}
SumDeclaration ::= SUM_KW Trivia+ IDENTIFIER Trivia* LCURLY Trivia* RCURLY {pin = 1}
TypeDeclaration ::= TYPE_KW Trivia* EQ Trivia* TypeExpr Trivia* SEMICOLON

StructBody ::= LCURLY SimpleTrivia* (StructItemList SimpleTrivia*)? RCURLY
StructItemList ::= StructItem (SimpleTrivia* StructItem)*
StructItem ::= AttributeStructItem | DocStructItem | SimpleStructItem
AttributeStructItem ::= Attribute
DocStructItem ::= Doc
SimpleStructItem ::= IDENTIFIER Trivia* COLON Trivia* TypeExpr Trivia* SEMICOLON

TypeExpr ::= PrimaryTypeExprGroup

private PrimaryTypeExprGroup ::= IdentifierTypeExpr | LiteralTypeExpr | ParenTypeExpr
ParenTypeExpr ::= LPAREN Trivia* TypeExpr Trivia* RPAREN {extends=TypeExpr}
LiteralTypeExpr ::= INT_LITERAL | BOOL_LITERAL | STRING_LITERAL {extends=TypeExpr}
IdentifierTypeExpr ::= IDENTIFIER {extends=TypeExpr}

Comment ::= BLOCK_COMMENT | LINE_COMMENT
SimpleTrivia ::= Comment | WHITE_SPACE
Doc ::= BLOCK_DOC
Trivia ::= SimpleTrivia | Doc
Attribute ::= LBRACK Trivia? IDENTIFIER Trivia? RBRACK
